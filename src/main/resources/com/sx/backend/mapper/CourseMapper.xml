<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sx.backend.mapper.CourseMapper">

    <resultMap id="courseDTOMap" type="com.sx.backend.dto.CourseDTO">
        <id property="courseId" column="course_id"/>
        <result property="courseCode" column="course_code"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="credit" column="credit"/>
        <result property="hours" column="hours"/>
        <result property="semester" column="semester"/>
        <result property="teacherId" column="teacher_id"/>
        <result property="teacherName" column="real_name"/>
        <result property="createTime" column="created_at"/>
        <result property="updateTime" column="updated_at"/>
        <result property="studentCount" column="student_count"/>
        <result property="taskCount" column="task_count"/>
    </resultMap>

    <select id="findByTeacherId" resultMap="courseDTOMap">
        SELECT
            c.course_id,
            c.course_code,
            c.name,
            c.description,
            c.credit,
            c.hours,
            c.semester,
            c.teacher_id,
            u.real_name,
            c.created_at,
            c.updated_at,
            (SELECT COUNT(*) FROM course_enrollment WHERE course_id = c.course_id) AS student_count,
            (SELECT COUNT(*) FROM task WHERE course_id = c.course_id) AS task_count
        FROM course c
                 JOIN user u ON c.teacher_id = u.user_id
        WHERE c.teacher_id = #{teacherId}
        ORDER BY c.created_at DESC
    </select>

    <select id="findByTeacherIdWithPaging" resultMap="courseDTOMap">
        SELECT
        c.course_id,
        c.course_code,
        c.name,
        c.description,
        c.credit,
        c.hours,
        c.semester,
        c.teacher_id,
        u.real_name,
        c.created_at,
        c.updated_at,
        (SELECT COUNT(*) FROM course_enrollment WHERE course_id = c.course_id) AS student_count,
        (SELECT COUNT(*) FROM task WHERE course_id = c.course_id) AS task_count
        FROM course c
        JOIN user u ON c.teacher_id = u.user_id
        WHERE c.teacher_id = #{teacherId}
        <if test="semester != null and semester != ''">
            AND c.semester = #{semester}
        </if>
        <if test="keyword != null and keyword != ''">
            AND (c.name LIKE CONCAT('%', #{keyword}, '%')
            OR c.course_code LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        ORDER BY c.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <select id="countByTeacherIdWithPaging" resultType="int">
        SELECT COUNT(*)
        FROM course c
        WHERE c.teacher_id = #{teacherId}
        <if test="semester != null and semester != ''">
            AND c.semester = #{semester}
        </if>
        <if test="keyword != null and keyword != ''">
            AND (c.name LIKE CONCAT('%', #{keyword}, '%')
            OR c.course_code LIKE CONCAT('%', #{keyword}, '%'))
        </if>
    </select>

    <insert id="insert" parameterType="com.sx.backend.entity.Course">
        INSERT INTO course (
            course_id, course_code, name, description,
            credit, hours, semester, teacher_id,
            created_at, updated_at
        ) VALUES (
                     #{courseId}, #{courseCode}, #{name}, #{description},
                     #{credit}, #{hours}, #{semester}, #{teacherId},
                     NOW(), NOW()
                 )
    </insert>

    <select id="findById" resultMap="courseDTOMap">
        SELECT
            c.course_id,
            c.course_code,
            c.name,
            c.description,
            c.credit,
            c.hours,
            c.semester,
            c.teacher_id,
            u.real_name,
            c.created_at,
            c.updated_at,
            (SELECT COUNT(*) FROM course_enrollment WHERE course_id = c.course_id) AS student_count,
            (SELECT COUNT(*) FROM task WHERE course_id = c.course_id) AS task_count
        FROM course c
                 JOIN user u ON c.teacher_id = u.user_id
        WHERE c.course_id = #{courseId}
    </select>

    <update id="update" parameterType="com.sx.backend.entity.Course">
        UPDATE course
        SET
            course_code = #{courseCode},
            name = #{name},
            description = #{description},
            credit = #{credit},
            hours = #{hours},
            semester = #{semester},
            updated_at = NOW()
        WHERE course_id = #{courseId}
    </update>

    <delete id="delete">
        DELETE FROM course
        WHERE course_id = #{courseId}
    </delete>

    <select id="countByCourseCode" resultType="int">
        SELECT COUNT(*)
        FROM course
        WHERE course_code = #{courseCode}
        <if test="excludeCourseId != null and excludeCourseId != ''">
            AND course_id != #{excludeCourseId}
        </if>
    </select>

    <select id="countEnrollmentsByCourseId" resultType="int">
        SELECT COUNT(*) FROM course_enrollment WHERE course_id = #{courseId}
    </select>

    <select id="countTasksByCourseId" resultType="int">
        SELECT COUNT(*) FROM task WHERE course_id = #{courseId}
    </select>

    <select id="countResourcesByCourseId" resultType="int">
        SELECT COUNT(*) FROM resource WHERE course_id = #{courseId}
    </select>

    <select id="findCourseWithTeacher" resultType="com.sx.backend.dto.CourseDTO">
        SELECT
            c.course_id AS courseId,
            c.course_code AS courseCode,
            c.name,
            c.description,
            c.credit,
            c.hours,
            c.semester,
            c.teacher_id AS teacherId,
            u.real_name AS teacherName,
            c.created_at AS createTime,
            c.updated_at AS updateTime,
            (SELECT COUNT(*) FROM course_enrollment WHERE course_id = c.course_id) AS studentCount,
            (SELECT COUNT(*) FROM task WHERE course_id = c.course_id) AS taskCount
        FROM course c
                 JOIN user u ON c.teacher_id = u.user_id
        WHERE c.course_id = #{courseId}
    </select>
</mapper>